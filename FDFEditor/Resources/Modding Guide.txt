MODDING GUIDE v1.0

Content:
[1] General Names and such
[2] Filenames and what their content is
[3] Pattern File Format
[4] Stage File Format
[5] Modding Images


[1] General Names and such

CrazyStorm = I've dubbed the bullet engine CrazyStorm mainly because the class CrazyStorm.cs in the game code is responsible for parsing pattern scripts
Pattern = A spellcard or non-spellcard for bosses, and attack pattern for regular enemies
Stage Script = A script that dictates enemy spawn behavior and what spells/non-spells the midboss and boss uses.
Batch = Pattern files contain enormeously long lines. Those most likely define Batch behavior but some do not.


[2] Filenames and what their content is

All files found in Content/Data
example     |  content          | filename pattern
------------+-------------------+---------------------
102.xna     |  stage script     | <xyz>.xna, x = stage (1-6 + extra + phantasm), y = 0, z = difficulty (easy = 1, lunatic = 4)
b174.xna    |  pattern script   | b<xyz>.xna, x = stage (1-6 + extra + phantasm), yz = some sort of index. View stage files for figuring out all the spells and non-spells the boss uses.
bg.xna      |  no idea          | bg.xna, there's only one file. It probably has to do with CrazyStorm
d212.xna    |  dialogue files   | d<xyz>.xna, x = stage (1-6 + extra + phantasm), y = language (1 = english, 0 = chinese), z = player character (1-4 as Reimu, Marisa, Sanae, Youmu)
e21.xna     |  no idea          | probably some CrazyStorm data again
s2.xna      |  spell list       | s<x>.xna, x = difficulty (1-4 as easy - lunatic + extra + phantasm), used exclusively for spell practice

List of all files that contain strings used ingame (thanks Mots Doux!):
filename   |  content
-----------+----------------------
6.xna      |  comments for the tracks in the music room
7.xna      |  challenge spellcard names
9(e).xna   |  9.xna for FDF1 and 9e.xna for FDF2. Achievement text.
d<xyz>.xna |  dialogue files, see previous table
s<x>.xna   |  list of spell names

List of savedata files:
4.xna, 5.xna, 8.xna

[3] Pattern File Format

Pattern files follow a hierarchy:
Pattern Definition
>Type Definition
>Global Event Definition (optional)
>Sounds Definition (optional)
>Center Definition (optional)
>Layers (4 of them)
>>Batches       - A group of bullets with similar behavior
>>Lasers        - A group of lasers with similar behavior
>>Covers        - not sure, maybe entities that remove bullets upon contact?
>>Rebounds      - not sure, maybe making stuff bounce off of walls?
>>Forces        - not sure, probably for influencing movement of the above.

If you take a look at the plain text version of a pattern file you'll see lines like this:
Layer1:新图层 ,1,680,6,0,0,0,0
This is a layer definition and contains the following parameters:
Layer<index>:<name>,<startframe>,<endframe>,<number of Batch definitions>, <number of Laser definitions>, <numCover>,<numRebound>,<numForces>
So when you see numBatches = 6 the following 6 lines all define batch behavior and have indices counting up. If numLaser = 3 for example
after the batch definitions will be that amount of laser definitions, again counting up indices.
In the Pattern View you'll see an item below a layer item for every one of those definitions. Click on them and you can see all the parameters it uses.

Pattern files have 2 fields relating to events in every batch (etc.) definition. They seem to be general control structures like greater-than,
but since they're in chinese there's nothing really we can do about it. They're hardcoded. There's potential for an additional view 
just for editing these but that would require more work and a translator. So for now they're black boxes, atleast for me.


[4] Stage File Format

Stage files are essentially their own scripting language. They operate entirely on relative Timestamps:
[0:00:00]
[minute:seconds:frame]

From here on [] refers to a timestamp.
Some more functions:
//this is a commentary line and ignored by the engine

For [] To [] Step []
{
<stuff> //the timestamp gets filled in automatically
}

Best you just look through the stage scripts yourself and the game's code to see how it all works.
Commands (as found in StageManager.cs):

Pause(int)
Pause for a certain amount of time.
int: number of frames to pause

Goto(int,int,int)
Sets the current stage timer to the specified values, essentially skipping.
int,int,int: minutes,seconds,frames

PlayMusic(string)
Starts playing music.
string: one of [road,boss,last] for stages, bosses, tlb's respectively. their actual id's are unrelated.

FadeoutMusic(float)
Fades out the music over a certain amount of time.
float: time in seconds (can be negative for fading in or getting louder than max volume)

Caution(float,float)
Displays "Caution" at a specified position.
float,float:x,y position

SetEnemyBarrageUnderActor()
Sets the current enemies barrage to be under the actor (or something)

RaiseEffect(string,float,float,int)

SetEnemyParent(string,string)

SetEnemyItems(float,float,float,float,float,float)

SetEnemy(float,float,float,float,float,int,int,int,string (optional)) //this one's more complex
sprite,?,?,?,?,hp,stage,barrage,id   //id is used to copy barrage when using copyenemy, default = 0

CopyEnemy(int,int,?,?,?,string) //also more complex
x,y,?,?,?,bId  //bId is the id of the enemy whose barrage should be copied

Saveid(string)

Loadid(string)

AddEvent(int,string,int,int) parameters can also be something else or something, idk

SetNoHarmTime(int)

ChangeEnemy(string,string,float,int,int)

SetBossCard(int,int,int,int, string (optional))

SetBossItems(9x int)
sets the amount of items the boss drops upon completing a card
9x int: bigBlue,blue,bigRed,red,full,life,life piece,bomb,bomb piece
note, bosses only drop bombs,lives and fulls in easy, extra or phantasm. hardcoded logic 

SetBoss(int string,int,int,int,int,optional string)

StageEnd(string)
Ends the stage and follows it up with another one or ends the game.
string: "2" -> goto stage 2. "ed" -> end 6 stage run, "exed" -> end extra, "phed" -> end phantasm, "sc" -> spellcard practice or something

Other commands:
LastBoss   //no braces
LoadBackGround
ShowTitle

Event Strings:
且 = And
或 = Or
>=<
变化到 = Change To
增加 = increase
减少 = reduce
恢复 = resume, recover
发射 = launch
新事件组 = new Event Group
当前帧 = Current Frame
帧 = frame
角度 = Angle
正比 = relative
变化 = Variety
到自机 = To Player
子弹 = bullet
速度 = speed
变化到 = Change To

新事件组|1|0|
当前帧=1：角度增加360，正比，180帧;&
translated:
new event group|1|0|
frame=1: Angle Increase 360, proportional, 180 frames;&
Verbally: 
-Create a new Event Group (tag = 1, t = 0, addtime = CurrentFrame = 1).
-Increase Angle by 360, relative, over 180 frames

新事件组|1|0|
当前帧=1：角度变化到自机，正比，1帧;
当前帧=1：子弹速度变化到2，正比，8帧;&
translated:
new event group|1|0|
frame=1 : Angle Variety To Player, Proportional, 1 Frame;
frame=1 : Change Bullet Speed To 2, Proportional, 8 Frames;&

新事件组|1|0|
当前帧=2：角度减少50，正比，1帧;
当前帧=1：子弹速度变化到2，正比，8帧;
当前帧=1：角度变化到自机，正比，1帧;&
new event group|1|0|
frame=2:Angle reduce 50, Proportional, 1frame;
frame=1:bullet speed change to 2, proportional, 8 frames;
frame=1:Angle Variety to player, proportional, 1 frame;&

新事件组|1|0|
当前帧=361：子弹速度变化到-3，正比，61帧;
frame = 361 : 
当前帧=1：子弹速度变化到0.01，正比，61帧;&

当前帧>1：角度变化到50，正比，90帧;

[5] Modding Images
Using the new Bulk De/Encryption tool it's quite easy to get the image files into an editable format and back.
Set the Keys and Game options to your liking. For the steam versions of the FDF games, they'll be "FDF1/2 Steam" and "0".
Go to "Tools > Bulk De/Encryption".
In the following window you can do the following:
1. Set the folder containing encrypted files via the "Encrypted Files" Button
2. Set the folder that you want the decrypted files to be saved in via the "Decrypted Files" Button
!!!Do not set these to the same folder!!!
3. Set the extension files should be after encrypting next to the "Decrypted Files" Button
4. Set the extension files should be after decrypting next to the "Encrypted Files" Button

The last two options are necessary to speed up the workflow. The game will only accept files ending with ".xna"
while common image editing programs might reject files not ending with ".png".

DOUBLE CHECK FOLDERS AND NUMBER OF FILES.
After configuring the directories and files, simply press "Decrypt". The program will now warn you about the
number of files found. The number of files found in the graphics folder should be around 203 for the 
Fantastic Danmaku Festival games. Keep the window open.

After decrypting all files, you'll find them in the folder designated in step 2. Simply edit the files to your liking.
Whenever you want to check your edits, simply press "Encrypt". Again, make sure everything is working properly.

Should any decryptions/encryptions fail, you will be asked whether you want to open the error log, which will
open a new tab in the main window. Errors usually happen when there are files that use different keys or are already encrypted.